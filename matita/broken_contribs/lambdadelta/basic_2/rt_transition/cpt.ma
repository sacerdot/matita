(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "ground/xoa/ex_4_3.ma".
include "ground/counters/rtc_ist_shift.ma".
include "ground/counters/rtc_ist_plus.ma".
include "ground/counters/rtc_ist_max.ma".
include "static_2/syntax/sh.ma".
include "basic_2/notation/relations/pty_6.ma".
include "basic_2/rt_transition/cpg.ma".

(* T-BOUND CONTEXT-SENSITIVE PARALLEL T-TRANSITION FOR TERMS ****************)

definition cpt (h) (G) (L) (n): relation2 term term ‚âù
           ŒªT1,T2. ‚àÉ‚àÉc. ùêì‚ù®n,c‚ù© & ‚ù®G,L‚ù© ‚ä¢ T1 ‚¨à[sh_is_next h,eq ‚Ä¶,c] T2.

interpretation
  "t-bound context-sensitive parallel t-transition (term)"
  'PTy h n G L T1 T2 = (cpt h G L n T1 T2).

(* Basic properties *********************************************************)

lemma cpt_ess (h) (G) (L):
      ‚àÄs. ‚ù®G,L‚ù© ‚ä¢ ‚ãÜs ‚¨Ü[h,1] ‚ãÜ(‚´Ø[h]s).
/3 width=3 by cpg_ess, ex2_intro/ qed.

lemma cpt_delta (h) (n) (G) (K):
      ‚àÄV1,V2. ‚ù®G,K‚ù© ‚ä¢ V1 ‚¨Ü[h,n] V2 ‚Üí
      ‚àÄW2. ‚áß[1] V2 ‚âò W2 ‚Üí ‚ù®G,K.‚ììV1‚ù© ‚ä¢ #0 ‚¨Ü[h,n] W2.
#h #n #G #K #V1 #V2 *
/3 width=5 by cpg_delta, ex2_intro/
qed.

lemma cpt_ell (h) (n) (G) (K):
      ‚àÄV1,V2. ‚ù®G,K‚ù© ‚ä¢ V1 ‚¨Ü[h,n] V2 ‚Üí
      ‚àÄW2. ‚áß[1] V2 ‚âò W2 ‚Üí ‚ù®G,K.‚ìõV1‚ù© ‚ä¢ #0 ‚¨Ü[h,‚Üën] W2.
#h #n #G #K #V1 #V2 *
/3 width=5 by cpg_ell, ex2_intro, ist_succ/
qed.

lemma cpt_lref (h) (n) (G) (K):
      ‚àÄT,i. ‚ù®G,K‚ù© ‚ä¢ #i ‚¨Ü[h,n] T ‚Üí ‚àÄU. ‚áß[1] T ‚âò U ‚Üí
      ‚àÄI. ‚ù®G,K.‚ìò[I]‚ù© ‚ä¢ #‚Üëi ‚¨Ü[h,n] U.
#h #n #G #K #T #i *
/3 width=5 by cpg_lref, ex2_intro/
qed.

lemma cpt_bind (h) (n) (G) (L):
      ‚àÄV1,V2. ‚ù®G,L‚ù© ‚ä¢ V1 ‚¨Ü[h,0] V2 ‚Üí ‚àÄI,T1,T2. ‚ù®G,L.‚ìë[I]V1‚ù© ‚ä¢ T1 ‚¨Ü[h,n] T2 ‚Üí
      ‚àÄp. ‚ù®G,L‚ù© ‚ä¢ ‚ìë[p,I]V1.T1 ‚¨Ü[h,n] ‚ìë[p,I]V2.T2.
#h #n #G #L #V1 #V2 * #cV #HcV #HV12 #I #T1 #T2 *
/3 width=5 by cpg_bind, ist_max_O1, ex2_intro/
qed.

lemma cpt_appl (h) (n) (G) (L):
      ‚àÄV1,V2. ‚ù®G,L‚ù© ‚ä¢ V1 ‚¨Ü[h,0] V2 ‚Üí
      ‚àÄT1,T2. ‚ù®G,L‚ù© ‚ä¢ T1 ‚¨Ü[h,n] T2 ‚Üí ‚ù®G,L‚ù© ‚ä¢ ‚ìêV1.T1 ‚¨Ü[h,n] ‚ìêV2.T2.
#h #n #G #L #V1 #V2 * #cV #HcV #HV12 #T1 #T2 *
/3 width=5 by ist_max_O1, cpg_appl, ex2_intro/
qed.

lemma cpt_cast (h) (n) (G) (L):
      ‚àÄU1,U2. ‚ù®G,L‚ù© ‚ä¢ U1 ‚¨Ü[h,n] U2 ‚Üí
      ‚àÄT1,T2. ‚ù®G,L‚ù© ‚ä¢ T1 ‚¨Ü[h,n] T2 ‚Üí ‚ù®G,L‚ù© ‚ä¢ ‚ìùU1.T1 ‚¨Ü[h,n] ‚ìùU2.T2.
#h #n #G #L #U1 #U2 * #cU #HcU #HU12 #T1 #T2 *
/3 width=6 by cpg_cast, ex2_intro/
qed.

lemma cpt_ee (h) (n) (G) (L):
      ‚àÄU1,U2. ‚ù®G,L‚ù© ‚ä¢ U1 ‚¨Ü[h,n] U2 ‚Üí ‚àÄT. ‚ù®G,L‚ù© ‚ä¢ ‚ìùU1.T ‚¨Ü[h,‚Üën] U2.
#h #n #G #L #V1 #V2 *
/3 width=3 by cpg_ee, ist_succ, ex2_intro/
qed.

lemma cpt_refl (h) (G) (L): reflexive ‚Ä¶ (cpt h G L 0).
/3 width=3 by cpg_refl, ex2_intro/ qed.

(* Advanced properties ******************************************************)

lemma cpt_sort (h) (G) (L):
      ‚àÄn. n ‚â§ 1 ‚Üí ‚àÄs. ‚ù®G,L‚ù© ‚ä¢ ‚ãÜs ‚¨Ü[h,n] ‚ãÜ((next h)^n s).
#h #G #L * //
#n #H #s <(le_n_O_to_eq n) /2 width=1 by le_S_S_to_le/
qed.

(* Basic inversion lemmas ***************************************************)

lemma cpt_inv_atom_sn (h) (n) (J) (G) (L):
      ‚àÄX2. ‚ù®G,L‚ù© ‚ä¢ ‚ì™[J] ‚¨Ü[h,n] X2 ‚Üí
      ‚à®‚à® ‚àß‚àß X2 = ‚ì™[J] & n = 0
       | ‚àÉ‚àÉs. X2 = ‚ãÜ(‚´Ø[h]s) & J = Sort s & n =1
       | ‚àÉ‚àÉK,V1,V2. ‚ù®G,K‚ù© ‚ä¢ V1 ‚¨Ü[h,n] V2 & ‚áß[1] V2 ‚âò X2 & L = K.‚ììV1 & J = LRef 0
       | ‚àÉ‚àÉm,K,V1,V2. ‚ù®G,K‚ù© ‚ä¢ V1 ‚¨Ü[h,m] V2 & ‚áß[1] V2 ‚âò X2 & L = K.‚ìõV1 & J = LRef 0 & n = ‚Üëm
       | ‚àÉ‚àÉI,K,T,i. ‚ù®G,K‚ù© ‚ä¢ #i ‚¨Ü[h,n] T & ‚áß[1] T ‚âò X2 & L = K.‚ìò[I] & J = LRef (‚Üëi).
#h #n #J #G #L #X2 * #c #Hc #H
elim (cpg_inv_atom1 ‚Ä¶ H) -H *
[ #H1 #H2 destruct /3 width=1 by or5_intro0, conj/
| #s1 #s2 #H1 #H2 #H3 #H4 destruct /3 width=3 by or5_intro1, ex3_intro/
| #cV #K #V1 #V2 #HV12 #HVT2 #H1 #H2 #H3 destruct
  /4 width=6 by or5_intro2, ex4_3_intro, ex2_intro/
| #cV #K #V1 #V2 #HV12 #HVT2 #H1 #H2 #H3 destruct
  elim (ist_inv_plus_SO_dx ‚Ä¶ H3) -H3 [| // ] #m #Hc #H destruct
  /4 width=9 by or5_intro3, ex5_4_intro, ex2_intro/
| #I #K #V2 #i #HV2 #HVT2 #H1 #H2 destruct
  /4 width=8 by or5_intro4, ex4_4_intro, ex2_intro/
]
qed-.

lemma cpt_inv_sort_sn (h) (n) (G) (L) (s):
      ‚àÄX2. ‚ù®G,L‚ù© ‚ä¢ ‚ãÜs ‚¨Ü[h,n] X2 ‚Üí
      ‚àß‚àß X2 = ‚ãÜ(((next h)^n) s) & n ‚â§ 1.
#h #n #G #L #s #X2 * #c #Hc #H
elim (cpg_inv_sort1 ‚Ä¶ H) -H * #H1 #H2 destruct
[ /2 width=1 by conj/
| #H1 #H2 destruct /2 width=1 by conj/
]
qed-.

lemma cpt_inv_zero_sn (h) (n) (G) (L):
      ‚àÄX2. ‚ù®G,L‚ù© ‚ä¢ #0 ‚¨Ü[h,n] X2 ‚Üí
      ‚à®‚à® ‚àß‚àß X2 = #0 & n = 0
       | ‚àÉ‚àÉK,V1,V2. ‚ù®G,K‚ù© ‚ä¢ V1 ‚¨Ü[h,n] V2 & ‚áß[1] V2 ‚âò X2 & L = K.‚ììV1
       | ‚àÉ‚àÉm,K,V1,V2. ‚ù®G,K‚ù© ‚ä¢ V1 ‚¨Ü[h,m] V2 & ‚áß[1] V2 ‚âò X2 & L = K.‚ìõV1 & n = ‚Üëm.
#h #n #G #L #X2 * #c #Hc #H elim (cpg_inv_zero1 ‚Ä¶ H) -H *
[ #H1 #H2 destruct /4 width=1 by ist_inv_00, or3_intro0, conj/
| #cV #K #V1 #V2 #HV12 #HVT2 #H1 #H2 destruct
  /4 width=8 by or3_intro1, ex3_3_intro, ex2_intro/
| #cV #K #V1 #V2 #HV12 #HVT2 #H1 #H2 destruct
  elim (ist_inv_plus_SO_dx ‚Ä¶ H2) -H2 // #m #Hc #H destruct
  /4 width=8 by or3_intro2, ex4_4_intro, ex2_intro/
]
qed-.

lemma cpt_inv_zero_sn_unit (h) (n) (I) (K) (G):
      ‚àÄX2. ‚ù®G,K.‚ì§[I]‚ù© ‚ä¢ #0 ‚¨Ü[h,n] X2 ‚Üí ‚àß‚àß X2 = #0 & n = 0.
#h #n #I #G #K #X2 #H
elim (cpt_inv_zero_sn ‚Ä¶ H) -H *
[ #H1 #H2 destruct /2 width=1 by conj/
| #Y #X1 #X2 #_ #_ #H destruct
| #m #Y #X1 #X2 #_ #_ #H destruct
]
qed.

lemma cpt_inv_lref_sn (h) (n) (G) (L) (i):
      ‚àÄX2. ‚ù®G,L‚ù© ‚ä¢ #‚Üëi ‚¨Ü[h,n] X2 ‚Üí
      ‚à®‚à® ‚àß‚àß X2 = #(‚Üëi) & n = 0
       | ‚àÉ‚àÉI,K,T. ‚ù®G,K‚ù© ‚ä¢ #i ‚¨Ü[h,n] T & ‚áß[1] T ‚âò X2 & L = K.‚ìò[I].
#h #n #G #L #i #X2 * #c #Hc #H elim (cpg_inv_lref1 ‚Ä¶ H) -H *
[ #H1 #H2 destruct /4 width=1 by ist_inv_00, or_introl, conj/
| #I #K #V2 #HV2 #HVT2 #H destruct
 /4 width=6 by ex3_3_intro, ex2_intro, or_intror/
]
qed-.

lemma cpt_inv_lref_sn_ctop (h) (n) (G) (i):
      ‚àÄX2. ‚ù®G,‚ãÜ‚ù© ‚ä¢ #i ‚¨Ü[h,n] X2 ‚Üí ‚àß‚àß X2 = #i & n = 0.
#h #n #G * [| #i ] #X2 #H
[ elim (cpt_inv_zero_sn ‚Ä¶ H) -H *
  [ #H1 #H2 destruct /2 width=1 by conj/
  | #Y #X1 #X2 #_ #_ #H destruct
  | #m #Y #X1 #X2 #_ #_ #H destruct
  ]
| elim (cpt_inv_lref_sn ‚Ä¶ H) -H *
  [ #H1 #H2 destruct /2 width=1 by conj/
  | #Z #Y #X0 #_ #_ #H destruct
  ]
]
qed.

lemma cpt_inv_gref_sn (h) (n) (G) (L) (l):
      ‚àÄX2. ‚ù®G,L‚ù© ‚ä¢ ¬ßl ‚¨Ü[h,n] X2 ‚Üí ‚àß‚àß X2 = ¬ßl & n = 0.
#h #n #G #L #l #X2 * #c #Hc #H elim (cpg_inv_gref1 ‚Ä¶ H) -H
#H1 #H2 destruct /2 width=1 by conj/
qed-.

lemma cpt_inv_bind_sn (h) (n) (p) (I) (G) (L) (V1) (T1):
      ‚àÄX2. ‚ù®G,L‚ù© ‚ä¢ ‚ìë[p,I]V1.T1 ‚¨Ü[h,n] X2 ‚Üí
      ‚àÉ‚àÉV2,T2. ‚ù®G,L‚ù© ‚ä¢ V1 ‚¨Ü[h,0] V2 & ‚ù®G,L.‚ìë[I]V1‚ù© ‚ä¢ T1 ‚¨Ü[h,n] T2
             & X2 = ‚ìë[p,I]V2.T2.
#h #n #p #I #G #L #V1 #T1 #X2 * #c #Hc #H
elim (cpg_inv_bind1 ‚Ä¶ H) -H *
[ #cV #cT #V2 #T2 #HV12 #HT12 #H1 #H2 destruct
  elim (ist_inv_max ‚Ä¶ H2) -H2 #nV #nT #HcV #HcT #H destruct
  elim (ist_inv_shift ‚Ä¶ HcV) -HcV #HcV #H destruct
  /3 width=5 by ex3_2_intro, ex2_intro/
| #cT #T2 #_ #_ #_ #_ #H destruct
  elim (ist_inv_plus_10_dx ‚Ä¶ H)
]
qed-.

lemma cpt_inv_appl_sn (h) (n) (G) (L) (V1) (T1):
      ‚àÄX2. ‚ù®G,L‚ù© ‚ä¢ ‚ìêV1.T1 ‚¨Ü[h,n] X2 ‚Üí
      ‚àÉ‚àÉV2,T2. ‚ù®G,L‚ù© ‚ä¢ V1 ‚¨Ü[h,0] V2 & ‚ù®G,L‚ù© ‚ä¢ T1 ‚¨Ü[h,n] T2 & X2 = ‚ìêV2.T2.
#h #n #G #L #V1 #T1 #X2 * #c #Hc #H elim (cpg_inv_appl1 ‚Ä¶ H) -H *
[ #cV #cT #V2 #T2 #HV12 #HT12 #H1 #H2 destruct
  elim (ist_inv_max ‚Ä¶ H2) -H2 #nV #nT #HcV #HcT #H destruct
  elim (ist_inv_shift ‚Ä¶ HcV) -HcV #HcV #H destruct
  /3 width=5 by ex3_2_intro, ex2_intro/
| #cV #cW #cU #p #V2 #W1 #W2 #U1 #U2 #_ #_ #_ #_ #_ #H destruct
  elim (ist_inv_plus_10_dx ‚Ä¶ H)
| #cV #cW #cU #p #V #V2 #W1 #W2 #U1 #U2 #_ #_ #_ #_ #_ #_ #H destruct
  elim (ist_inv_plus_10_dx ‚Ä¶ H)
]
qed-.

lemma cpt_inv_cast_sn (h) (n) (G) (L) (V1) (T1):
      ‚àÄX2. ‚ù®G,L‚ù© ‚ä¢ ‚ìùV1.T1 ‚¨Ü[h,n] X2 ‚Üí
      ‚à®‚à® ‚àÉ‚àÉV2,T2. ‚ù®G,L‚ù© ‚ä¢ V1 ‚¨Ü[h,n] V2 & ‚ù®G,L‚ù© ‚ä¢ T1 ‚¨Ü[h,n] T2 & X2 = ‚ìùV2.T2
       | ‚àÉ‚àÉm. ‚ù®G,L‚ù© ‚ä¢ V1 ‚¨Ü[h,m] X2 & n = ‚Üëm.
#h #n #G #L #V1 #T1 #X2 * #c #Hc #H elim (cpg_inv_cast1 ‚Ä¶ H) -H *
[ #cV #cT #V2 #T2 #HV12 #HT12 #HcVT #H1 #H2 destruct
  elim (ist_inv_max ‚Ä¶ H2) -H2 #nV #nT #HcV #HcT #H destruct
  <idempotent_max
  /4 width=5 by or_introl, ex3_2_intro, ex2_intro/
| #cT #_ #H destruct
  elim (ist_inv_plus_10_dx ‚Ä¶ H)
| #cV #H12 #H destruct
  elim (ist_inv_plus_SO_dx ‚Ä¶ H) -H [| // ] #m #Hm #H destruct
  /4 width=3 by ex2_intro, or_intror/
]
qed-.
