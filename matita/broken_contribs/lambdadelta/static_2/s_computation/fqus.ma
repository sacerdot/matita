(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "ground/xoa/ex_2_3.ma".
include "ground/xoa/ex_3_3.ma".
include "ground/xoa/or_5.ma".
include "ground/lib/star.ma".
include "static_2/notation/relations/suptermstar_6.ma".
include "static_2/notation/relations/suptermstar_7.ma".
include "static_2/s_transition/fquq.ma".

(* STAR-ITERATED SUPCLOSURE *************************************************)

definition fqus: bool ‚Üí tri_relation genv lenv term ‚âù
                 Œªb. tri_TC ‚Ä¶ (fquq b).

interpretation "extended star-iterated structural successor (closure)"
   'SupTermStar b G1 L1 T1 G2 L2 T2 = (fqus b G1 L1 T1 G2 L2 T2).

interpretation "star-iterated structural successor (closure)"
   'SupTermStar G1 L1 T1 G2 L2 T2 = (fqus true G1 L1 T1 G2 L2 T2).

(* Basic eliminators ********************************************************)

lemma fqus_ind: ‚àÄb,G1,L1,T1. ‚àÄQ:relation3 ‚Ä¶. Q G1 L1 T1 ‚Üí
                (‚àÄG,G2,L,L2,T,T2. ‚ù®G1,L1,T1‚ù© ‚¨Ç*[b] ‚ù®G,L,T‚ù© ‚Üí ‚ù®G,L,T‚ù© ‚¨Ç‚∏Æ[b] ‚ù®G2,L2,T2‚ù© ‚Üí Q G L T ‚Üí Q G2 L2 T2) ‚Üí
                ‚àÄG2,L2,T2. ‚ù®G1,L1,T1‚ù© ‚¨Ç*[b] ‚ù®G2,L2,T2‚ù© ‚Üí Q G2 L2 T2.
#b #G1 #L1 #T1 #R #IH1 #IH2 #G2 #L2 #T2 #H
@(tri_TC_star_ind ‚Ä¶ IH1 IH2 G2 L2 T2 H) //
qed-.

lemma fqus_ind_dx: ‚àÄb,G2,L2,T2. ‚àÄQ:relation3 ‚Ä¶. Q G2 L2 T2 ‚Üí
                   (‚àÄG1,G,L1,L,T1,T. ‚ù®G1,L1,T1‚ù© ‚¨Ç‚∏Æ[b] ‚ù®G,L,T‚ù© ‚Üí ‚ù®G,L,T‚ù© ‚¨Ç*[b] ‚ù®G2,L2,T2‚ù© ‚Üí Q G L T ‚Üí Q G1 L1 T1) ‚Üí
                   ‚àÄG1,L1,T1. ‚ù®G1,L1,T1‚ù© ‚¨Ç*[b] ‚ù®G2,L2,T2‚ù© ‚Üí Q G1 L1 T1.
#b #G2 #L2 #T2 #Q #IH1 #IH2 #G1 #L1 #T1 #H
@(tri_TC_star_ind_dx ‚Ä¶ IH1 IH2 G1 L1 T1 H) //
qed-.

(* Basic properties *********************************************************)

lemma fqus_refl: ‚àÄb. tri_reflexive ‚Ä¶ (fqus b).
/2 width=1 by tri_inj/ qed.

lemma fquq_fqus: ‚àÄb,G1,G2,L1,L2,T1,T2. ‚ù®G1,L1,T1‚ù© ‚¨Ç‚∏Æ[b] ‚ù®G2,L2,T2‚ù© ‚Üí
                 ‚ù®G1,L1,T1‚ù© ‚¨Ç*[b] ‚ù®G2,L2,T2‚ù©.
/2 width=1 by tri_inj/ qed.

lemma fqus_strap1: ‚àÄb,G1,G,G2,L1,L,L2,T1,T,T2. ‚ù®G1,L1,T1‚ù© ‚¨Ç*[b] ‚ù®G,L,T‚ù© ‚Üí
                   ‚ù®G,L,T‚ù© ‚¨Ç‚∏Æ[b] ‚ù®G2,L2,T2‚ù© ‚Üí ‚ù®G1,L1,T1‚ù© ‚¨Ç*[b] ‚ù®G2,L2,T2‚ù©.
/2 width=5 by tri_step/ qed-.

lemma fqus_strap2: ‚àÄb,G1,G,G2,L1,L,L2,T1,T,T2. ‚ù®G1,L1,T1‚ù© ‚¨Ç‚∏Æ[b] ‚ù®G,L,T‚ù© ‚Üí
                   ‚ù®G,L,T‚ù© ‚¨Ç*[b] ‚ù®G2,L2,T2‚ù© ‚Üí ‚ù®G1,L1,T1‚ù© ‚¨Ç*[b] ‚ù®G2,L2,T2‚ù©.
/2 width=5 by tri_TC_strap/ qed-.

(* Basic inversion lemmas ***************************************************)

lemma fqus_inv_fqu_sn: ‚àÄb,G1,G2,L1,L2,T1,T2. ‚ù®G1,L1,T1‚ù© ‚¨Ç*[b] ‚ù®G2,L2,T2‚ù© ‚Üí
                       (‚àß‚àß G1 = G2 & L1 = L2 & T1 = T2) ‚à®
                       ‚àÉ‚àÉG,L,T. ‚ù®G1,L1,T1‚ù© ‚¨Ç[b] ‚ù®G,L,T‚ù© & ‚ù®G,L,T‚ù© ‚¨Ç*[b] ‚ù®G2,L2,T2‚ù©.
#b #G1 #G2 #L1 #L2 #T1 #T2 #H12 @(fqus_ind_dx ‚Ä¶ H12) -G1 -L1 -T1 /3 width=1 by and3_intro, or_introl/
#G1 #G #L1 #L #T1 #T * /3 width=5 by ex2_3_intro, or_intror/
* #HG #HL #HT #_ destruct //
qed-.

lemma fqus_inv_sort1: ‚àÄb,G1,G2,L1,L2,T2,s. ‚ù®G1,L1,‚ãÜs‚ù© ‚¨Ç*[b] ‚ù®G2,L2,T2‚ù© ‚Üí
                      (‚àß‚àß G1 = G2 & L1 = L2 & ‚ãÜs = T2) ‚à®
                      ‚àÉ‚àÉJ,L. ‚ù®G1,L,‚ãÜs‚ù© ‚¨Ç*[b] ‚ù®G2,L2,T2‚ù© & L1 = L.‚ìò[J].
#b #G1 #G2 #L1 #L2 #T2 #s #H elim (fqus_inv_fqu_sn ‚Ä¶ H) -H * /3 width=1 by and3_intro, or_introl/
#G #L #T #H elim (fqu_inv_sort1 ‚Ä¶ H) -H /3 width=4 by ex2_2_intro, or_intror/
qed-.

lemma fqus_inv_lref1: ‚àÄb,G1,G2,L1,L2,T2,i. ‚ù®G1,L1,#i‚ù© ‚¨Ç*[b] ‚ù®G2,L2,T2‚ù© ‚Üí
                      ‚à®‚à® ‚àß‚àß G1 = G2 & L1 = L2 & #i = T2
                       | ‚àÉ‚àÉJ,L,V. ‚ù®G1,L,V‚ù© ‚¨Ç*[b] ‚ù®G2,L2,T2‚ù© & L1 = L.‚ìë[J]V & i = (ùüé)
                       | ‚àÉ‚àÉJ,L,j. ‚ù®G1,L,#j‚ù© ‚¨Ç*[b] ‚ù®G2,L2,T2‚ù© & L1 = L.‚ìò[J] & i = (‚Å§‚Üëj).
#b #G1 #G2 #L1 #L2 #T2 #i #H elim (fqus_inv_fqu_sn ‚Ä¶ H) -H * /3 width=1 by and3_intro, or3_intro0/
#G #L #T #H elim (fqu_inv_lref1 ‚Ä¶ H) -H * /3 width=6 by ex3_3_intro, or3_intro1, or3_intro2/
qed-.

lemma fqus_inv_gref1: ‚àÄb,G1,G2,L1,L2,T2,l. ‚ù®G1,L1,¬ßl‚ù© ‚¨Ç*[b] ‚ù®G2,L2,T2‚ù© ‚Üí
                      (‚àß‚àß G1 = G2 & L1 = L2 & ¬ßl = T2) ‚à®
                      ‚àÉ‚àÉJ,L. ‚ù®G1,L,¬ßl‚ù© ‚¨Ç*[b] ‚ù®G2,L2,T2‚ù© & L1 = L.‚ìò[J].
#b #G1 #G2 #L1 #L2 #T2 #l #H elim (fqus_inv_fqu_sn ‚Ä¶ H) -H * /3 width=1 by and3_intro, or_introl/
#G #L #T #H elim (fqu_inv_gref1 ‚Ä¶ H) -H /3 width=4 by ex2_2_intro, or_intror/
qed-.

lemma fqus_inv_bind1: ‚àÄb,p,I,G1,G2,L1,L2,V1,T1,T2. ‚ù®G1,L1,‚ìë[p,I]V1.T1‚ù© ‚¨Ç*[b] ‚ù®G2,L2,T2‚ù© ‚Üí
                      ‚à®‚à® ‚àß‚àß G1 = G2 & L1 = L2 & ‚ìë[p,I]V1.T1 = T2
                       | ‚ù®G1,L1,V1‚ù© ‚¨Ç*[b] ‚ù®G2,L2,T2‚ù©
                       | ‚àß‚àß ‚ù®G1,L1.‚ìë[I]V1,T1‚ù© ‚¨Ç*[b] ‚ù®G2,L2,T2‚ù© & b = ‚ì£
                       | ‚àß‚àß ‚ù®G1,L1.‚ìß,T1‚ù© ‚¨Ç*[b] ‚ù®G2,L2,T2‚ù© & b = ‚ìï
                       | ‚àÉ‚àÉJ,L,T. ‚ù®G1,L,T‚ù© ‚¨Ç*[b] ‚ù®G2,L2,T2‚ù© & ‚áß[‚Å§ùüè] T ‚âò ‚ìë[p,I]V1.T1 & L1 = L.‚ìò[J].
#b #p #I #G1 #G2 #L1 #L2 #V1 #T1 #T2 #H elim (fqus_inv_fqu_sn ‚Ä¶ H) -H * /3 width=1 by and3_intro, or5_intro0/
#G #L #T #H elim (fqu_inv_bind1 ‚Ä¶ H) -H *
[4: #J ] #H1 #H2 #H3 [3,4: #Hb ] #H destruct
/3 width=6 by or5_intro1, or5_intro2, or5_intro3, or5_intro4, ex3_3_intro, conj/
qed-.


lemma fqus_inv_bind1_true: ‚àÄp,I,G1,G2,L1,L2,V1,T1,T2. ‚ù®G1,L1,‚ìë[p,I]V1.T1‚ù© ‚¨Ç* ‚ù®G2,L2,T2‚ù© ‚Üí
                           ‚à®‚à® ‚àß‚àß G1 = G2 & L1 = L2 & ‚ìë[p,I]V1.T1 = T2
                               | ‚ù®G1,L1,V1‚ù© ‚¨Ç* ‚ù®G2,L2,T2‚ù©
                               | ‚ù®G1,L1.‚ìë[I]V1,T1‚ù© ‚¨Ç* ‚ù®G2,L2,T2‚ù©
                               | ‚àÉ‚àÉJ,L,T. ‚ù®G1,L,T‚ù© ‚¨Ç* ‚ù®G2,L2,T2‚ù© & ‚áß[‚Å§ùüè] T ‚âò ‚ìë[p,I]V1.T1 & L1 = L.‚ìò[J].
#p #I #G1 #G2 #L1 #L2 #V1 #T1 #T2 #H elim (fqus_inv_bind1 ‚Ä¶ H) -H [1,3,4: * ]
[1,2,4,5: /3 width=1 by and3_intro, or4_intro0, or4_intro1, or4_intro2, or4_intro3/ ]
#_ #H destruct
qed-.

lemma fqus_inv_flat1: ‚àÄb,I,G1,G2,L1,L2,V1,T1,T2. ‚ù®G1,L1,‚ìï[I]V1.T1‚ù© ‚¨Ç*[b] ‚ù®G2,L2,T2‚ù© ‚Üí
                      ‚à®‚à® ‚àß‚àß G1 = G2 & L1 = L2 & ‚ìï[I]V1.T1 = T2
                       | ‚ù®G1,L1,V1‚ù© ‚¨Ç*[b] ‚ù®G2,L2,T2‚ù©
                       | ‚ù®G1,L1,T1‚ù© ‚¨Ç*[b] ‚ù®G2,L2,T2‚ù©
                       | ‚àÉ‚àÉJ,L,T. ‚ù®G1,L,T‚ù© ‚¨Ç*[b] ‚ù®G2,L2,T2‚ù© & ‚áß[‚Å§ùüè] T ‚âò ‚ìï[I]V1.T1 & L1 = L.‚ìò[J].
#b #I #G1 #G2 #L1 #L2 #V1 #T1 #T2 #H elim (fqus_inv_fqu_sn ‚Ä¶ H) -H * /3 width=1 by and3_intro, or4_intro0/
#G #L #T #H elim (fqu_inv_flat1 ‚Ä¶ H) -H *
[3: #J ] #H1 #H2 #H3 #H destruct
/3 width=6 by or4_intro1, or4_intro2, or4_intro3, ex3_3_intro/
qed-.

(* Advanced inversion lemmas ************************************************)

lemma fqus_inv_atom1: ‚àÄb,I,G1,G2,L2,T2. ‚ù®G1,‚ãÜ,‚ì™[I]‚ù© ‚¨Ç*[b] ‚ù®G2,L2,T2‚ù© ‚Üí
                      ‚àß‚àß G1 = G2 & ‚ãÜ = L2 & ‚ì™[I] = T2.
#b #I #G1 #G2 #L2 #T2 #H elim (fqus_inv_fqu_sn ‚Ä¶ H) -H * /2 width=1 by and3_intro/
#G #L #T #H elim (fqu_inv_atom1 ‚Ä¶ H)
qed-.

lemma fqus_inv_sort1_bind: ‚àÄb,I,G1,G2,L1,L2,T2,s. ‚ù®G1,L1.‚ìò[I],‚ãÜs‚ù© ‚¨Ç*[b] ‚ù®G2,L2,T2‚ù© ‚Üí
                           (‚àß‚àß G1 = G2 & L1.‚ìò[I] = L2 & ‚ãÜs = T2) ‚à® ‚ù®G1,L1,‚ãÜs‚ù© ‚¨Ç*[b] ‚ù®G2,L2,T2‚ù©.
#b #I #G1 #G2 #L1 #L2 #T2 #s #H elim (fqus_inv_fqu_sn ‚Ä¶ H) -H * /3 width=1 by and3_intro, or_introl/
#G #L #T #H elim (fqu_inv_sort1_bind ‚Ä¶ H) -H
#H1 #H2 #H3 #H destruct /2 width=1 by or_intror/
qed-.

lemma fqus_inv_zero1_pair: ‚àÄb,I,G1,G2,L1,L2,V1,T2. ‚ù®G1,L1.‚ìë[I]V1,#ùüé‚ù© ‚¨Ç*[b] ‚ù®G2,L2,T2‚ù© ‚Üí
                           (‚àß‚àß G1 = G2 & L1.‚ìë[I]V1 = L2 & #(ùüé) = T2) ‚à® ‚ù®G1,L1,V1‚ù© ‚¨Ç*[b] ‚ù®G2,L2,T2‚ù©.
#b #I #G1 #G2 #L1 #L2 #V1 #T2 #H elim (fqus_inv_fqu_sn ‚Ä¶ H) -H * /3 width=1 by and3_intro, or_introl/
#G #L #T #H elim (fqu_inv_zero1_pair ‚Ä¶ H) -H
#H1 #H2 #H3 #H destruct /2 width=1 by or_intror/
qed-.

lemma fqus_inv_lref1_bind: ‚àÄb,I,G1,G2,L1,L2,T2,i. ‚ù®G1,L1.‚ìò[I],#(‚Å§‚Üëi)‚ù© ‚¨Ç*[b] ‚ù®G2,L2,T2‚ù© ‚Üí
                           (‚àß‚àß G1 = G2 & L1.‚ìò[I] = L2 & #(‚Å§‚Üëi) = T2) ‚à® ‚ù®G1,L1,#i‚ù© ‚¨Ç*[b] ‚ù®G2,L2,T2‚ù©.
#b #I #G1 #G2 #L1 #L2 #T2 #i #H elim (fqus_inv_fqu_sn ‚Ä¶ H) -H * /3 width=1 by and3_intro, or_introl/
#G #L #T #H elim (fqu_inv_lref1_bind ‚Ä¶ H) -H
#H1 #H2 #H3 #H destruct /2 width=1 by or_intror/
qed-.

lemma fqus_inv_gref1_bind: ‚àÄb,I,G1,G2,L1,L2,T2,l. ‚ù®G1,L1.‚ìò[I],¬ßl‚ù© ‚¨Ç*[b] ‚ù®G2,L2,T2‚ù© ‚Üí
                           (‚àß‚àß G1 = G2 & L1.‚ìò[I] = L2 & ¬ßl = T2) ‚à® ‚ù®G1,L1,¬ßl‚ù© ‚¨Ç*[b] ‚ù®G2,L2,T2‚ù©.
#b #I #G1 #G2 #L1 #L2 #T2 #l #H elim (fqus_inv_fqu_sn ‚Ä¶ H) -H * /3 width=1 by and3_intro, or_introl/
#G #L #T #H elim (fqu_inv_gref1_bind ‚Ä¶ H) -H
#H1 #H2 #H3 #H destruct /2 width=1 by or_intror/
qed-.

(* Basic_2A1: removed theorems 1: fqus_drop *)
