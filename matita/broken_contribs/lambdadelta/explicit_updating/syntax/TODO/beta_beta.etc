include "ground/arith/nat_le_plus.ma".
include "explicit_updating/syntax/unwind_lref.ma".
include "explicit_updating/syntax/unwind_eq.ma".
include "explicit_updating/syntax/beta_nexts.ma".
include "explicit_updating/syntax/beta_eq.ma".
(*
‚Üë*[m]‚¨ï[n‚Üêv]t ‚âê ‚¨ï[n+m‚Üêv]‚Üë*[m]t.
*)

lemma beta_beta_ge_lref (w) (v) (m) (n) (p):
      ‚¨ï[m‚Üê‚¨ï[n‚Üêw]v]‚¨ï[‚Å§‚Üë(n+m)‚Üêw]ùõè‚ù®p‚ù© ‚âê ‚¨ï[n+m‚Üêw]‚¨ï[m‚Üêv]ùõè‚ù®p‚ù©.
#w #v #m #n #p
elim (nat_split_lt_eq_gt m (‚Üìp)) #Hm
[
| destruct
  >(npsucc_pnpred p) in ‚ä¢ (?(???(???%))(???(???%)));
  <beta_lref_succ <beta_lref_le [| // ]
  <beta_lref_succ

(* Note: substitution lemma *)
theorem beta_beta_ge (w) (v) (t) (f) (m) (n):
        ‚¨ï[m‚Üê‚¨ï[n‚Üêw]v]‚¨ï[‚Å§‚Üë(n+m)‚Üêw]‚ñº[f]t ‚âê ‚¨ï[n+m‚Üêw]‚¨ï[m‚Üêv]‚ñº[f]t.
#w #v #t elim t -t
[ #f #m #n <unwind_unit_lref
|
|
| #f #t #IH #g #m #n
  @(term_eq_repl ‚Ä¶ (IH (g‚Ä¢f) m n)) -IH
  /3 width=1 by beta_eq_repl/
