(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "explicit_updating/syntax/substitution_tapp_eq.ma".
include "explicit_updating/syntax/substitution_compose.ma".
(*
lemma subst_tapp_push_next (S) (t:ùïã):
      ‚Üë(SÔº†‚ß£‚ù®t‚ù©) ‚âê (‚´ØS)Ôº†‚ß£‚ù®‚Üët‚ù©.
#S #t <subst_tapp_lift 
*)

(* COMPOSITION FOR SUBSTITUTION *********************************************)

(* Constructions with subst_eq **********************************************)

lemma subst_compose_eq_repl:
      compatible_3 ‚Ä¶ subst_eq subst_eq subst_eq subst_compose.
#S1 #S2 #HS #R1 #R2 #HR #p
<subst_compose_dapp <subst_compose_dapp
/3 width=1 by subst_dapp_eq_repl, subst_tapp_eq_repl/
qed.

(* Constructions with subst_push ********************************************)

lemma subst_compose_push (S) (R:ùïä):
      (‚´ØS)‚Ä¢(‚´ØR) ‚âê ‚´Ø(S‚Ä¢R).
#S #R * // #p
<subst_compose_dapp <subst_push_succ
<subst_push_succ <subst_compose_dapp

(*
include "explicit_updating/syntax/substitution_pushs.ma".

lemma subst_compose_pushs (t:ùïã) (R:ùïä) (S) (n):
      ((‚´Ø*[n]S)‚Ä¢(‚´Ø*[n]R))Ôº†‚ß£‚ù®t‚ù© ‚âê ‚´Ø*[n](S‚Ä¢R)Ôº†‚ß£‚ù®t‚ù©.
#t elim t -t
[ #R #S @nat_ind_succ [ // ] #n #_
  <subst_pushs_succ <subst_pushs_succ <subst_pushs_succ //
| #b #t #IH #R #S #n
  <subst_tapp_abst <subst_tapp_abst
  @term_eq_abst >subst_pushs_unit
  @(term_eq_canc_sx ‚Ä¶ (IH ‚Ä¶)) //
|
| #f #t #IH #R #S #n
  <subst_tapp_lift <subst_tapp_lift
*)  


lemma subst_compose_tapp (t:ùïã) (R) (S):
      SÔº†‚ß£‚ù®RÔº†‚ß£‚ù®t‚ù©‚ù© ‚âê (S‚Ä¢R)Ôº†‚ß£‚ù®t‚ù©.
#t elim t -t
[ //
| #b #t #IH #R #S
  <subst_tapp_abst <subst_tapp_abst
  @term_eq_abst
  @(term_eq_trans ‚Ä¶ (IH ‚Ä¶)) -IH
|
| #f #t #IH #R #S
  <subst_tapp_lift <subst_tapp_lift
  >subst_compose_after_dx
  @(term_eq_trans ‚Ä¶ (IH ‚Ä¶)) -IH //
]
qed.
