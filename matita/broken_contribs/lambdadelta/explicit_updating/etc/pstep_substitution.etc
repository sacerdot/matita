(**************************************************************************)
(*       ___                                                              *)
(*      ||M||                                                             *)
(*      ||A||       A project by Andrea Asperti                           *)
(*      ||T||                                                             *)
(*      ||I||       Developers:                                           *)
(*      ||T||         The HELM team.                                      *)
(*      ||A||         http://helm.cs.unibo.it                             *)
(*      \   /                                                             *)
(*       \ /        This file is distributed under the terms of the       *)
(*        v         GNU General Public License Version 2                  *)
(*                                                                        *)
(**************************************************************************)

include "explicit_updating/reduction/pstep_term.ma".

(* P-REDUCTION FOR SUBSTITUTION *********************************************)

definition pstep_subst: relation2 (ùïä) (ùïä) ‚âù
           ŒªS1,S2. ‚àÄp:‚Ñï‚Å∫. S1Ôº†‚ß£‚ù®p‚ù© ‚û°‚à• S2Ôº†‚ß£‚ù®p‚ù©.

interpretation
  "p-reduction (substitution)"
  'BlackRightArrowParallel S1 S2 = (pstep_subst S1 S2).

(* Constructions with subst_eq **********************************************)

lemma pstep_subst_eq_repl:
      replace_2 ‚Ä¶ subst_eq subst_eq pstep_subst.
/2 width=5 by pstep_term_eq_repl/
qed-.

lemma pstep_subst_eq_trans (S) (S1) (S2):
      S1 ‚û°‚à• S ‚Üí S ‚âê S2 ‚Üí S1 ‚û°‚à• S2.
/2 width=5 by pstep_subst_eq_repl/
qed-.

lemma eq_pstep_subst_trans (S) (S1) (S2):
      S1 ‚âê S ‚Üí S ‚û°‚à• S2 ‚Üí S1 ‚û°‚à• S2.
/3 width=5 by pstep_subst_eq_repl, subst_eq_sym/
qed-.

(* Constructions with subst_push ********************************************)

lemma pstep_subst_push_bi (S1) (S2):
      S1 ‚û°‚à• S2 ‚Üí ‚´ØS1 ‚û°‚à• ‚´ØS2.
#S1 #S2 #HS12 *
[ /2 width=1 by pstep_term_refl/
| /2 width=1 by pstep_term_next_bi/
]
qed.

(* Constructions with subst_pushs *******************************************)

lemma pstep_subst_pushs_bi (n) (S1) (S2):
      S1 ‚û°‚à• S2 ‚Üí ‚´Ø*[n]S1 ‚û°‚à• ‚´Ø*[n]S2.
@nat_ind_succ //
#n #IH #S1 #S2 #HS12
<subst_pushs_succ_swap <subst_pushs_succ_swap
/3 width=1 by pstep_subst_push_bi/
qed.

(* Constructions with subst_after *******************************************)

lemma pstep_subst_after (f1) (f2) (S1) (S2):
      S1 ‚û°‚à• S2 ‚Üí f1 ‚âê f2 ‚Üí S1‚Ä¢f1 ‚û°‚à• S2‚Ä¢f2.
/3 width=5 by pstep_subst_eq_trans, subst_after_eq_repl/
qed.

(* Constructions with subst_tapp ********************************************)

lemma pstep_subst_tapp_bi_refl_dx (t:ùïã) (S1) (S2):
      S1 ‚û°‚à• S2 ‚Üí S1Ôº†‚ß£‚ù®t‚ù© ‚û°‚à• S2Ôº†‚ß£‚ù®t‚ù©.
#t elim t -t
/4 width=1 by pstep_term_abst, pstep_term_appl, pstep_subst_push_bi, pstep_subst_after/
qed.
